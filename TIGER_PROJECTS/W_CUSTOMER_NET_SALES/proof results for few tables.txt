proof results for few tables:

1.
with a as (select * from dev_edw.edw_omni.wc_daily_sales_m),
b as (select * from dev_edw.edw_omni.w_sla_xact_f)

select distinct a.calendar_date::date acct_period_end_dt_wid,
b.accounting_date,
last_day(current_date()),
a.row_wid,
a.gl_update_flag,
'1' || to_char(last_day(a.calendar_date::date), 'YYYYMMDD') || '000' 
from a,b
where b.accounting_date = a.calendar_date
and acct_period_end_dt_wid is null
--and acct_period_end_dt_wid <= last_day(current_date())  

-- 2. for net_sales and mtd calculations tested this code with minimum cols

with

    w_ledger_d as (select * from dev_edw.edw_omni.w_ledger_d),
    w_gl_segment_d as (select * from dev_edw.edw_omni.w_gl_segment_d),
    w_sla_xact_f as (select * from dev_edw.edw_omni.w_sla_xact_f),
    w_xact_source_d as (select * from dev_edw.edw_omni.w_xact_source_d),
    w_gl_account_d as (select * from dev_edw.edw_omni.w_gl_account_d),
    w_customer_account_d as (select * from dev_edw.edw_omni.w_customer_account_d),
    w_freight_terms_d as (select * from dev_edw.edw_omni.w_freight_terms_d),
    w_gl_segment_dh as (select * from dev_edw.edw_omni.w_gl_segment_dh),
    w_day_d as (select * from dev_edw.edw_omni.w_day_d),
    w_forecast_scenarios_d as (select * from dev_edw.edw_omni.w_forecast_scenarios_d),
    wc_daily_sales_m as (select * from dev_edw.edw_omni.wc_daily_sales_m),
    current_period as (
        select
            -- ent_period_end_date,
            -- calendar_date- 10000000 yago_dt_wid,
            ent_period_year_ago_end_date yago_period_wid,
            ent_prior_year / cal_month_number_of_days mtd_percent,
            calendar_date mcal_day_wid,
            -- floor(ent_period_ago_end_date / 1000) * 1000 prior_period_wid,
            ent_day_of_period,
            ent_period_start_date,
            ent_period_end_date,
            add_months(ent_period_start_date, -1) prior_period_start_dt,
            dateadd(day, -1, ent_period_start_date) prior_period_end_dt,
            -- to_char(ENT_DAY_OF_YEAR, 'YYYYMMDD'),
            ent_day_of_year,
            ent_day_of_year + actuals_month * 100000
            forecast_actuals_day_wid,
            ent_day_of_year + budget_actuals_months * 100000
            budget_actuals_day_wid,
            b.scenario fc_scenario,
            add_months(ent_period_start_date, -12) yago_period_start_dt,
            add_months(ent_period_end_date, -12) yago_period_end_dt,
            current_date - 1 last_date,
            'HOT Calendar' mcal_cal_name,
            'N' adjustment_period_flg
        from
            w_day_d,

            (
                select actuals_month, scenario, budget_actuals_months
                from w_forecast_scenarios_d
                where active_flag = 'Y'
            ) b
        where 1 = 1 and calendar_date = current_date - 1  -- calendar_date
    -- AND w_current_mcal_period_code = 'Current'
    -- AND w_current_mcal_day_code = 'Previous'
    ),
    -- division by zero exception as ship_Date is null @dayd_d
    mtd as (
        select
            count(distinct case when calendar_date < current_date() then ship_date end)
            / count(distinct ship_date)
            mtd_percent
        from w_day_d
        where ent_period = to_char(dateadd(day, -1, current_timestamp()), 'Mon-YY')
    ),
    -- null values in ship_date
    ship_cal as (
        select
            '1' || to_char(max(year_ago_date), 'YYYYMMDD') || '000'
            yago_ship_dt_wid,
            max(year_ago_date) yago_ship_date
        from w_day_d
        where
            ship_date = (
                select max(ship_date)
                from w_day_d c
                where calendar_date < current_date()
            )
    ),

    sales_details as (
        select
            sq.generic_customer_account_id,
            sq.customer_account_id,
            -- sq.acct_period_id,
            sq.accounting_date,
        sum(sq.sla_loc_amount) sla_loc_amt,
        sq.brand_segment_id,
        gl.gl_account_id,
            cp.ent_period_end_date,
            cp.prior_period_end_dt,
            cp.yago_period_end_dt

        from w_sla_xact_f sq, w_gl_account_d gl
        right join
            (

                select

                    b.segment_integration_id
                    integration_id,

                    min(b.segment_integration_id) over (

                        partition by b.level0_segment_description

                        order by b.segment_integration_id

                    ) gl_product_line_id

                from dev_edw.edw_omni.w_gl_segment_dh b

                where

                    b.level0_segment_description in (

                        'HH Leadership Categories',
                        'HH Seasonal Categories',

                        'HH Developing Categories',
                        'HH All Other Categories'

                    )

                    and b.level3_segment_code <> b.level2_segment_code
            ) rollup_pl
        left join
            w_gl_segment_d rollup_sg,
            current_period cp,
            w_ledger_d lg,
            w_customer_account_d c,
            w_freight_terms_d f,
            w_xact_source_d j

        where
            gl.gl_account_number not in (  -- '9999',
                -- '9000',
                -- '9990',
                '1070',
                '1071',
                '1075',
                '1076',
                '1077',
                '1072',
                '1074',
                '1073',
                '1061',
                '1062',
                '1063'
            )

            and lg.ledger_id || '~' || 100 = sq.ledger_id
            and lg.ledger_currency = 'USD'
            and lg.ledger_name not in (
                'HOT FASB52 USD FR',
                'HOT FASB52 USD GB',
                'HOT FASB52 USD MX',
                'CONSO HOT LATIN AMERICA LLC'
            )
            and sq.journal_source_id = j.integration_id
            and sq.gl_account_id = gl.integration_id
            and gl.gl_intercompany_code = '000'
            and j.source_code <> 'Conversion'
            and sq.accounting_date
            in (cp.ent_period_end_date, cp.prior_period_end_dt, cp.yago_period_end_dt)
            and sq.accounting_date > '2019-01-01'
            and c.integration_id = sq.generic_customer_account_id
            -- and c.customer_group like '%AMAZON%'
            -- and gl.account_group = 'Gross Sales'
            -- AND gl.account_type <> 'R'
            and f.integration_id = sq.freight_terms_id
            and rollup_pl.integration_id = gl.gl_product_line_id
            and rollup_pl.gl_product_line_id = rollup_sg.integration_id
        group by

            sq.generic_customer_account_id,
            sq.customer_account_id,
            sq.brand_segment_id,
              gl.gl_account_id,
          --  sq.acct_period_id,
            sq.accounting_date,
            cp.ent_period_end_date,
            cp.prior_period_end_dt,
            cp.yago_period_end_dt

    ),

    sub_1 as (
        select  
            sq.generic_customer_account_id,
            sq.customer_account_id,
            sq.accounting_date,
            cp.ent_period_end_date,
            cp.prior_period_end_dt,
            cp.yago_period_end_dt,
            sum(case when db.acct_period_end_dt_wid is not null then -1 * sq.sla_loc_amt end)
            net_sales,
            sum(
                case
                    when
                        sq.accounting_date
                        not  in (cp.ent_period_end_date, cp.yago_period_end_dt)
                        and db.acct_period_end_dt_wid is not null
                    then -1 * sla_loc_amt
                    else 0
                end
            )
            sales_mtd,
        
            0 allocation_amt
         
        from
            sales_details sq,
            current_period cp,
            (
                select distinct
                  --  '1' || to_char(last_day(a.calendar_date::date), 'YYYYMMDD') || '000' acct_period_end_dt_wid,
                    a.calendar_date::date acct_period_end_dt_wid,
                    b.gl_brand_id,
                    b.integration_id gl_account_id
                from wc_daily_sales_m a, w_gl_account_d b
               where
                   a.gl_update_flag is null
                   and a.row_wid is null
                    and b.gl_account_number = '401000'
                  and acct_period_end_dt_wid < last_day(current_date())  
            )
            db
      where
               db.acct_period_end_dt_wid = sq.accounting_date
           and   db.gl_brand_id = sq.brand_segment_id
       -- and db.gl_account_id = sq.gl_account_id
        group by
            sq.generic_customer_account_id,
            sq.customer_account_id,
            sq.accounting_date,
              cp.ent_period_end_date,
            cp.prior_period_end_dt,
            cp.yago_period_end_dt
           
    )
    select * from  sub_1
    -- should start with union all here
    -- taki ng inputs from sales_details,current_dp and intermediate
    

-- step 3
 select a.account_segment_id,b.gl_account_id from dev_edw.edw_omni.w_sla_xact_f a , dev_edw.edw_omni.w_gl_account_d b
  where a.account_segment_id = b.gl_account_id limit 100

-- step 4:

 select a.gl_account_id,b.integration_id from dev_edw.edw_omni.w_sla_xact_f a , dev_edw.edw_omni.w_gl_account_d b
  where a.gl_Account_id = b.integration_id limit 10

-- step 5:

with      wc_daily_sales_m as (select * from dev_edw.edw_omni.wc_daily_sales_m),
    w_gl_account_d as (select * from dev_edw.edw_omni.w_gl_account_d)


 
 select distinct
                  --  '1' || to_char(last_day(a.calendar_date::date), 'YYYYMMDD') || '000' acct_period_end_dt_wid,
                    a.calendar_date::date acct_period_end_dt_wid,
                    b.gl_brand_id,
                    b.gl_account_id
                from wc_daily_sales_m a, w_gl_account_d b
               where
                   a.gl_update_flag is null
                   and a.row_wid is null
                    and b.gl_account_number = '401000'
                  and acct_period_end_dt_wid < last_day(current_date())  


--- step 6: (accountign_Date in july 28th )
with

    w_ledger_d as (select * from dev_edw.edw_omni.w_ledger_d),
    w_gl_segment_d as (select * from dev_edw.edw_omni.w_gl_segment_d),
    w_sla_xact_f as (select * from dev_edw.edw_omni.w_sla_xact_f),
    w_xact_source_d as (select * from dev_edw.edw_omni.w_xact_source_d),
    w_gl_account_d as (select * from dev_edw.edw_omni.w_gl_account_d),
    w_customer_account_d as (select * from dev_edw.edw_omni.w_customer_account_d),
    w_freight_terms_d as (select * from dev_edw.edw_omni.w_freight_terms_d),
    w_gl_segment_dh as (select * from dev_edw.edw_omni.w_gl_segment_dh),
    w_day_d as (select * from dev_edw.edw_omni.w_day_d),
    w_forecast_scenarios_d as (select * from dev_edw.edw_omni.w_forecast_scenarios_d),
    wc_daily_sales_m as (select * from dev_edw.edw_omni.wc_daily_sales_m),
    current_period as (
        select
            -- ent_period_end_date,
            -- calendar_date- 10000000 yago_dt_wid,
            ent_period_year_ago_end_date yago_period_wid,
            ent_prior_year / cal_month_number_of_days mtd_percent,
            calendar_date mcal_day_wid,
            -- floor(ent_period_ago_end_date / 1000) * 1000 prior_period_wid,
            ent_day_of_period,
            ent_period_start_date,
            ent_period_end_date,
            add_months(ent_period_start_date, -1) prior_period_start_dt,
            dateadd(day, -4, ent_period_start_date) prior_period_end_dt,
            -- to_char(ENT_DAY_OF_YEAR, 'YYYYMMDD'),
            ent_day_of_year,
            ent_day_of_year + actuals_month * 100000
            forecast_actuals_day_wid,
            ent_day_of_year + budget_actuals_months * 100000
            budget_actuals_day_wid,
            b.scenario fc_scenario,
            add_months(ent_period_start_date, -12) yago_period_start_dt,
            add_months(ent_period_end_date, -12) yago_period_end_dt,
            current_date - 1 last_date,
            'HOT Calendar' mcal_cal_name,
            'N' adjustment_period_flg
        from
            w_day_d,

            (
                select actuals_month, scenario, budget_actuals_months
                from w_forecast_scenarios_d
                where active_flag = 'Y'
            ) b
        where 1 = 1 and calendar_date = current_date - 1  -- calendar_date
    -- AND w_current_mcal_period_code = 'Current'
    -- AND w_current_mcal_day_code = 'Previous'
    ),
    -- division by zero exception as ship_Date is null @dayd_d
    mtd as (
        select
            count(distinct case when calendar_date < current_date() then ship_date end)
            / count(distinct ship_date)
            mtd_percent
        from w_day_d
        where ent_period = to_char(dateadd(day, -1, current_timestamp()), 'Mon-YY')
    ),
    -- null values in ship_date
    ship_cal as (
        select
            '1' || to_char(max(year_ago_date), 'YYYYMMDD') || '000'
            yago_ship_dt_wid,
            max(year_ago_date) yago_ship_date
        from w_day_d
        where
            ship_date = (
                select max(ship_date)
                from w_day_d c
                where calendar_date < current_date()
            )
    ),

    sales_details as (
        select
            sq.generic_customer_account_id,
            sq.customer_account_id,
            -- sq.acct_period_id,
            sq.accounting_date

        from w_sla_xact_f sq, current_period cp

        where

            sq.accounting_date
            in (cp.ent_period_end_date, cp.prior_period_end_dt, cp.yago_period_end_dt)

        group by

            sq.generic_customer_account_id, sq.customer_account_id, sq.accounting_date

    )

/*  sub_1 as (
        select  
            sq.generic_customer_account_id,
            sq.customer_account_id,
            sq.accounting_date,
            cp.ent_period_end_date,
            cp.prior_period_end_dt,
            cp.yago_period_end_dt,
            sum(case when db.acct_period_end_dt_wid is not null then -1 * sq.sla_loc_amt end)
            net_sales,
            sum(
                case
                    when
                        sq.accounting_date
                        not  in (cp.ent_period_end_date, cp.yago_period_end_dt)
                        and db.acct_period_end_dt_wid is not null
                    then -1 * sla_loc_amt
                    else 0
                end
            )
            sales_mtd,
        
            0 allocation_amt
         
        from
            sales_details sq,
            current_period cp,
            (
                select distinct
                  --  '1' || to_char(last_day(a.calendar_date::date), 'YYYYMMDD') || '000' acct_period_end_dt_wid,
                    a.calendar_date::date acct_period_end_dt_wid,
                    b.gl_brand_id,
                    b.gl_account_id
                from wc_daily_sales_m a, w_gl_account_d b
               where
                   a.gl_update_flag is null
                   and a.row_wid is null
                    and b.gl_account_number = '401000'
                  and acct_period_end_dt_wid < last_day(current_date())  
            )
            db
      where
               db.acct_period_end_dt_wid = sq.accounting_date
           and   db.gl_brand_id = sq.brand_segment_id
      -- and db.gl_account_id = sq.account_segment_id
        group by
            sq.generic_customer_account_id,
            sq.customer_account_id,
            sq.accounting_date,
              cp.ent_period_end_date,
            cp.prior_period_end_dt,
            cp.yago_period_end_dt
           
    ) */
select *
from
    sales_details
    -- should start with union all here
    -- taki ng inputs from sales_details,current_dp and intermediate

-- step 7::

select a.gl_account_id,b.integration_id,a.transaction_quantity from dev_edw.edw_omni.w_sla_xact_f a , dev_edw.edw_omni.w_gl_account_d b
    where a.gl_Account_id = b.integration_id  limit 1000

     select a.gl_account_id,sum(a.transaction_quantity) from dev_edw.edw_omni.w_sla_xact_f a where a.transaction_quantity > 0.0
     group by a.gl_account_id

     select ent_period_start_date,dateadd(day, -1, ent_period_start_date) prior_period_end_dt from dev_edw.edw_omni.w_day_d
     where ent_period_start_date in(select calendar_date from dev_edw.edw_omni.w_day_d where calendar_date = current_date - 1)

-- step 8 (sq, rollup_pl,gl_Account_d)
with w_gl_account_d as (select * from dev_edw.edw_omni.w_gl_account_d),
sq as (select * from dev_edw.edw_omni.w_sla_xact_f),
 rollup_pl as  (

                select

                    b.segment_integration_id
                    integration_id,

                    min(b.segment_integration_id) over (

                        partition by b.level0_segment_description

                        order by b.segment_integration_id

                    ) gl_product_line_id

                from dev_edw.edw_omni.w_gl_segment_dh b

                where

                    b.level0_segment_description in (

                        'HH Leadership Categories',
                        'HH Seasonal Categories',

                        'HH Developing Categories',
                        'HH All Other Categories'

                    )

                    and b.level3_segment_code <> b.level2_segment_code) ,

                    final as (
                        select sq.generic_customer_account_id,
                        sq.accounting_date,
                        sq.transaction_quantity,
                        sq.sla_loc_amount,
                        sq.inventory_item_id,
                        sq.inventory_org_id,
                        sq.inventory_product_id
                        from sq, w_gl_account_d sg,rollup_pl
                        where sq.gl_account_id = sg.integration_id
                        and   rollup_pl.integration_id = sg.gl_product_line_id
                       and rollup_pl.gl_product_line_id = sg.integration_id
                        and sq.accounting_date = '2023-07-31'
                    )
                    select * from final 
                    --where generic_customer_account_id > 0||'~'||100

-- step 10:

this is the code just to check the condtiotion working for mere id's
with
    sales_details as (select * from {{ ref("stg_oracle__customer_net_sales") }}),

    sales as (
        select
            sq.accounting_date period_id,
            sq.generic_customer_account_id customer_account_id,
            sq.customer_account_id customer_id,
            sq.inventory_item_id,
            sq.inventory_product_id,
            sq.inventory_org_id,
            sq.business_unit_segment_id gl_business_unit_id,
            sq.company_segment_id gl_company_id,
            sq.location_segment_id gl_location_id,
            sq.product_line_segment_id gl_product_line_id,
            sq.brand_segment_id gl_brand_id,

            sq.sales_channel_segment_id sales_channel_id
        from sales_details sq
        where
            sq.xact_quantity = 0
            and sq.sla_loc_amt <> 0
            and sq.account_group = 'Gross Sales'
            and sq.generic_customer_account_id = '0'
            and sq.accounting_date in  ('2022-08-31','2023-07-31')

           
            and sq.customer_name not in (
                'CONSUMER RELATIONS GENERAL SALES KAZ US',
                'BBJ SUD OUEST KAZ CH',
                'CDISCOUNT SA KAZ CH',
                'CONSUMER RELATIONS WARRANTY SALES KAZ US'
            )
        group by
            sq.accounting_date,
            sq.generic_customer_account_id,
            sq.customer_account_id,
            sq.inventory_item_id,
            sq.inventory_product_id,
            sq.inventory_org_id,
            sq.business_unit_segment_id,
            sq.company_segment_id,
            sq.location_segment_id,
            sq.product_line_segment_id,
            sq.brand_segment_id,
            sq.sales_channel_segment_id
    )
select *
from
    sales
    -- where generic_customer_account_id > 0||'~'||100
    


-- step 11:

to check with sal_xact_f for certain fields

  select *from dev_discover.FINANCIALS.stg_oracle__customer_net_sales  where accounting_date  = '2023-07-31' and  generic_customer_Account_id > '0' and account_group = 'Gross Sales'
                 select *from dev_discover.FINANCIALS.stg_oracle__customer_net_sales  where accounting_date  = '2023-07-31' and  generic_customer_Account_id >'0' and account_group = 'Gross Sales'
     and xact_quantity > '0' and sla_loc_amt <> 0
       select *from dev_discover.FINANCIALS.stg_oracle__customer_net_sales  where accounting_date  = '2022-08-31' and  generic_customer_Account_id >'0' and account_group = 'Gross Sales'
     and xact_quantity > '0' and sla_loc_amt <> 0
     
       select *from dev_discover.FINANCIALS.stg_oracle__customer_net_sales  where accounting_date  = '2023-07-31' and  generic_customer_Account_id ='0' and account_group = 'Gross Sales'
     and xact_quantity = '0' and sla_loc_amt <> 0
     
      select *from dev_discover.FINANCIALS.stg_oracle__customer_net_sales  where accounting_date  = '2022-08-31' and  generic_customer_Account_id ='0' and account_group = 'Gross Sales'
     and xact_quantity = '0' and sla_loc_amt <> 0 and customer_group like '%AMAZON%'
     
      select *from dev_discover.FINANCIALS.stg_oracle__customer_net_sales  where accounting_date  = '2022-08-31'  and customer_group like '%AMAZON%'
           select *from dev_discover.FINANCIALS.stg_oracle__customer_net_sales  where accounting_date  = '2023-07-31'  and customer_group like '%AMAZON%'and account_group = 'Gross Sales'
     and  generic_customer_Account_id >'0' 
    and sla_loc_amt= '0.0' and account_group = 'Gross Sales'
            

-- atep 12:

sales.generic_customer_account_id,
            sales.customer_account_id,
            sales.fiscal_period_id,
            sales.inventory_item_id,
            sales.inventory_product_id,
            sales.inventory_org_id,
            sales.business_unit_segment_id,
            sales.company_segment_id,
            sales.location_segment_id,
            sales.gl_account_id,
            sales.product_line_segment_id,
            sales.brand_segment_id


-- step 13:

with
    wc_daily_sales_m as (select * from dev_edw.edw_omni.wc_daily_sales_m),
    w_gl_account_d as (select * from dev_edw.edw_omni.w_gl_account_d),
    sq as (select * from {{ ref("stg_oracle__customer_net_sales") }})

sales as (
    select sq.generic_customer_account_id,
    sq.accounting_date fiscal_period_id
    from sq),

db as (
(select distinct
    -- '1' || to_char(last_day(a.calendar_date::date), 'YYYYMMDD') || '000'
    -- acct_period_end_dt_wid,
    a.calendar_date::date acct_period_end_dt_wid,
     b.gl_brand_id,
      b.gl_account_id
from wc_daily_sales_m a, w_gl_account_d b
where
    a.gl_update_flag is null
    and a.row_wid is null
    and b.gl_account_number = '401000'
    and acct_period_end_dt_wid < last_day(current_date())
)
) 
select * from db



            


    
